name: Code Coverage (JavaScript)

on:
  push:
    branches:
      - main
    paths:
      - '**/*.js'

  pull_request:
    branches:
      - main
    paths:
      - '**/*.js'

  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  test:
    name: Run Tests and Upload Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install Jest globally
        run: |
          npm install -g jest

      - name: Create Jest config file dynamically
        run: |
          echo "module.exports = {
            roots: ['<rootDir>/'],
            testMatch: ['**/*.test.js'],
            collectCoverage: true,
            coverageDirectory: 'coverage',
            coverageReporters: ['html', 'text', 'lcov']
          };" > jest.config.js

      - name: Run tests with coverage
        run: |
          # Run Jest with coverage and dynamically created config file
          jest --config=jest.config.js --coverage --passWithNoTests --coverageDirectory=coverage

      - name: Debug Coverage Text Output
        run: |
          # Print the text coverage report for debugging
          echo "Text Coverage Report:"
          cat coverage/lcov-report/index.html || echo "No coverage report found."

      - name: Extract Coverage Percentage
        id: extract-coverage
        run: |
          # Extract the coverage percentage from the text summary
          COVERAGE=$(grep -oP 'All files.*?\K[0-9]+\.[0-9]+' coverage/lcov-report/index.html || echo "33")
          if [[ -z "$COVERAGE" ]]; then
            echo "Coverage percentage not found, defaulting to 33%"
            COVERAGE=33
          fi
          echo "Coverage Percentage: $COVERAGE%"
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Move coverage reports to docs/
        run: |
          # Use a custom username from workflow inputs or default to "default-user"
          USERNAME="${{ github.event.inputs.custom_username || 'default-user' }}"
          
          # Define the path for the user's folder in the docs directory
          DOCS_FOLDER="docs/$USERNAME"

          # Create the docs folder if it doesn't exist
          mkdir -p "$DOCS_FOLDER"

          # Move the entire coverage folder (including all generated reports) to the docs folder
          mv coverage/* "$DOCS_FOLDER/"

      - name: Upload Coverage Reports as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: docs/${{ github.event.inputs.custom_username || 'default-user' }}/

      - name: Commit and Push Coverage Reports to GitHub Pages
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Add and commit the entire folder
          git add docs/${{ github.event.inputs.custom_username || 'default-user' }}/
          git commit -m "Update coverage reports for ${{ github.event.inputs.custom_username || 'default-user' }}"

          # Push the changes to GitHub Pages
          git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }} main --force

      - name: Call API to Insert Quality Score
        run: |
         API_URL="https://dolphin-app-uzion.ondigitalocean.app/api/setCoverage?clientpublic=baef7468287a44d8ac3634026d9fb8d1&clientsecret=181a2f3171117c1bd164c88b1171c1b83114fc1712121b12"
         USER_ID="Javascript_coverage"
         CLIENT_PUBLIC="baef7468287a44d8ac3634026d9fb8d1"
         CLIENT_SECRET="181a2f3171117c1bd164c88b1171c1b83114fc1712121b12"
         LAST_REQUEST_TIME="1733275263647"
         projectid="C10180"
         curl -X POST "$API_URL" \
           -H "Content-Type: application/json" \
           -d "{
              \"userid\": \"$USER_ID\",
              \"clientpublic\": \"$CLIENT_PUBLIC\",
              \"clientsecret\": \"$CLIENT_SECRET\",
              \"projectid\": \"$projectid\",
              \"recordtime\": \"$LAST_REQUEST_TIME\",
              \"coverage\": \"${{ env.COVERAGE }}\"
            }"

      - name: Clean up coverage directory
        run: rm -rf coverage/
